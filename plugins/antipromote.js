const fs=require('fs'), path=require('path'); const db=path.join(__dirname,'../database/antipromote.json'); let P={}; if(fs.existsSync(db)) P=JSON.parse(fs.readFileSync(db))
module.exports={ name:'antipromote', description:'Anti promote protection', command:['antipromote'], category:'group',
 handler: async (sock, chat, args)=>{ const sub=args[0]; if(!['on','off'].includes(sub)) return sock.sendMessage(chat,{text:'Usage: .antipromote on/off'}); P[chat]= sub==='on'; fs.writeFileSync(db,JSON.stringify(P,null,2)); return sock.sendMessage(chat,{text:`âœ” antipromote ${sub}`}) },
 onGroupParticipantsUpdate: async (sock, update)=>{
   try{ const { id, participants, action, author } = update; const group=id; const member=participants[0]; const executor=author||'unknown'; await sock.sendMessage(group,{ text: action==='promote'?`âš¡ Admin Promote Alert\nUser: @${member.split('@')[0]}\nBy: @${executor.split('@')[0]}`:`âš  Admin Demote Alert\nUser: @${member.split('@')[0]}\nBy: @${executor.split('@')[0]}`, mentions:[member, executor] }); if(P[group]){ if(action==='promote') { await sock.groupParticipantsUpdate(group,[member],'demote'); await sock.sendMessage(group,{text:'ðŸš« Unauthorized promote reverted'}) } if(action==='demote'){ await sock.groupParticipantsUpdate(group,[member],'promote'); await sock.sendMessage(group,{text:'ðŸš« Unauthorized demote reverted'}) } } }catch(e){console.error(e)} }
}